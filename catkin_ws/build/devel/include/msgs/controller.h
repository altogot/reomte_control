// Generated by gencpp from file msgs/controller.msg
// DO NOT EDIT!


#ifndef MSGS_MESSAGE_CONTROLLER_H
#define MSGS_MESSAGE_CONTROLLER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msgs
{
template <class ContainerAllocator>
struct controller_
{
  typedef controller_<ContainerAllocator> Type;

  controller_()
    : control_flag(false)
    , brake_flag(false)
    , gear_flag(false)
    , gear_to_set(0)
    , speed(0.0)
    , acceleration(0.0)
    , wheel_angle(0.0)  {
    }
  controller_(const ContainerAllocator& _alloc)
    : control_flag(false)
    , brake_flag(false)
    , gear_flag(false)
    , gear_to_set(0)
    , speed(0.0)
    , acceleration(0.0)
    , wheel_angle(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _control_flag_type;
  _control_flag_type control_flag;

   typedef uint8_t _brake_flag_type;
  _brake_flag_type brake_flag;

   typedef uint8_t _gear_flag_type;
  _gear_flag_type gear_flag;

   typedef uint8_t _gear_to_set_type;
  _gear_to_set_type gear_to_set;

   typedef float _speed_type;
  _speed_type speed;

   typedef float _acceleration_type;
  _acceleration_type acceleration;

   typedef float _wheel_angle_type;
  _wheel_angle_type wheel_angle;





  typedef boost::shared_ptr< ::msgs::controller_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msgs::controller_<ContainerAllocator> const> ConstPtr;

}; // struct controller_

typedef ::msgs::controller_<std::allocator<void> > controller;

typedef boost::shared_ptr< ::msgs::controller > controllerPtr;
typedef boost::shared_ptr< ::msgs::controller const> controllerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msgs::controller_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msgs::controller_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msgs::controller_<ContainerAllocator1> & lhs, const ::msgs::controller_<ContainerAllocator2> & rhs)
{
  return lhs.control_flag == rhs.control_flag &&
    lhs.brake_flag == rhs.brake_flag &&
    lhs.gear_flag == rhs.gear_flag &&
    lhs.gear_to_set == rhs.gear_to_set &&
    lhs.speed == rhs.speed &&
    lhs.acceleration == rhs.acceleration &&
    lhs.wheel_angle == rhs.wheel_angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msgs::controller_<ContainerAllocator1> & lhs, const ::msgs::controller_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::msgs::controller_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgs::controller_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgs::controller_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgs::controller_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs::controller_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs::controller_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msgs::controller_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8fa6cc1077b0e6ad3e8d031a45a0fd67";
  }

  static const char* value(const ::msgs::controller_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8fa6cc1077b0e6adULL;
  static const uint64_t static_value2 = 0x3e8d031a45a0fd67ULL;
};

template<class ContainerAllocator>
struct DataType< ::msgs::controller_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msgs/controller";
  }

  static const char* value(const ::msgs::controller_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msgs::controller_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool control_flag\n"
"\n"
"bool brake_flag\n"
"\n"
"bool gear_flag\n"
"\n"
"uint8 gear_to_set\n"
"\n"
"float32 speed\n"
"\n"
"float32 acceleration\n"
"\n"
"float32 wheel_angle\n"
;
  }

  static const char* value(const ::msgs::controller_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msgs::controller_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.control_flag);
      stream.next(m.brake_flag);
      stream.next(m.gear_flag);
      stream.next(m.gear_to_set);
      stream.next(m.speed);
      stream.next(m.acceleration);
      stream.next(m.wheel_angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct controller_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msgs::controller_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msgs::controller_<ContainerAllocator>& v)
  {
    s << indent << "control_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.control_flag);
    s << indent << "brake_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.brake_flag);
    s << indent << "gear_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gear_flag);
    s << indent << "gear_to_set: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gear_to_set);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "acceleration: ";
    Printer<float>::stream(s, indent + "  ", v.acceleration);
    s << indent << "wheel_angle: ";
    Printer<float>::stream(s, indent + "  ", v.wheel_angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSGS_MESSAGE_CONTROLLER_H
